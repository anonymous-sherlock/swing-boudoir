/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WinnersRouteImport } from './routes/winners'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as SplatRouteImport } from './routes/$'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VotersIndexRouteImport } from './routes/voters/index'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding/index'
import { Route as LeaderboardIndexRouteImport } from './routes/leaderboard/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as PaymentsSuccessRouteImport } from './routes/payments/success'
import { Route as PaymentsFailureRouteImport } from './routes/payments/failure'
import { Route as DashboardSectionRouteImport } from './routes/dashboard/$section'
import { Route as AuthIdRouteImport } from './routes/auth/$id'
import { Route as AdminWinnersRouteImport } from './routes/admin/winners'
import { Route as AdminVotesBoostRouteImport } from './routes/admin/votes-boost'
import { Route as AdminPaymentsRouteImport } from './routes/admin/payments'
import { Route as AdminLeaderboardRouteImport } from './routes/admin/leaderboard'
import { Route as AdminAnalyticsRouteImport } from './routes/admin/analytics'
import { Route as PublicTermsOfServicesRouteImport } from './routes/_public/terms-of-services'
import { Route as PublicRulesRouteImport } from './routes/_public/rules'
import { Route as PublicPrivacyRouteImport } from './routes/_public/privacy'
import { Route as PublicFaqRouteImport } from './routes/_public/faq'
import { Route as PublicContactRouteImport } from './routes/_public/contact'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminProfilesIndexRouteImport } from './routes/admin/profiles/index'
import { Route as AdminContestsIndexRouteImport } from './routes/admin/contests/index'
import { Route as PublicCompetitionsIndexRouteImport } from './routes/_public/competitions/index'
import { Route as AdminProfilesIdRouteImport } from './routes/admin/profiles/$id'
import { Route as AdminContestsCreateRouteImport } from './routes/admin/contests/create'
import { Route as PublicProfileUsernameRouteImport } from './routes/_public/profile.$username'
import { Route as PublicCompetitionsSlugRouteRouteImport } from './routes/_public/competitions/$slug/route'
import { Route as PublicCompetitionsSlugIndexRouteImport } from './routes/_public/competitions/$slug/index'
import { Route as AdminContestsIdLeaderboardRouteImport } from './routes/admin/contests/$id.leaderboard'
import { Route as AdminContestsIdEditRouteImport } from './routes/admin/contests/$id.edit'
import { Route as PublicCompetitionsSlugParticipantsRouteImport } from './routes/_public/competitions/$slug/participants'

const WinnersRoute = WinnersRouteImport.update({
  id: '/winners',
  path: '/winners',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VotersIndexRoute = VotersIndexRouteImport.update({
  id: '/voters/',
  path: '/voters/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardIndexRoute = LeaderboardIndexRouteImport.update({
  id: '/leaderboard/',
  path: '/leaderboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const PaymentsSuccessRoute = PaymentsSuccessRouteImport.update({
  id: '/payments/success',
  path: '/payments/success',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentsFailureRoute = PaymentsFailureRouteImport.update({
  id: '/payments/failure',
  path: '/payments/failure',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSectionRoute = DashboardSectionRouteImport.update({
  id: '/$section',
  path: '/$section',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthIdRoute = AuthIdRouteImport.update({
  id: '/auth/$id',
  path: '/auth/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminWinnersRoute = AdminWinnersRouteImport.update({
  id: '/winners',
  path: '/winners',
  getParentRoute: () => AdminRoute,
} as any)
const AdminVotesBoostRoute = AdminVotesBoostRouteImport.update({
  id: '/votes-boost',
  path: '/votes-boost',
  getParentRoute: () => AdminRoute,
} as any)
const AdminPaymentsRoute = AdminPaymentsRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLeaderboardRoute = AdminLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAnalyticsRoute = AdminAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AdminRoute,
} as any)
const PublicTermsOfServicesRoute = PublicTermsOfServicesRouteImport.update({
  id: '/terms-of-services',
  path: '/terms-of-services',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicRulesRoute = PublicRulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicPrivacyRoute = PublicPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicFaqRoute = PublicFaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicContactRoute = PublicContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProfilesIndexRoute = AdminProfilesIndexRouteImport.update({
  id: '/profiles/',
  path: '/profiles/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestsIndexRoute = AdminContestsIndexRouteImport.update({
  id: '/contests/',
  path: '/contests/',
  getParentRoute: () => AdminRoute,
} as any)
const PublicCompetitionsIndexRoute = PublicCompetitionsIndexRouteImport.update({
  id: '/competitions/',
  path: '/competitions/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AdminProfilesIdRoute = AdminProfilesIdRouteImport.update({
  id: '/profiles/$id',
  path: '/profiles/$id',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestsCreateRoute = AdminContestsCreateRouteImport.update({
  id: '/contests/create',
  path: '/contests/create',
  getParentRoute: () => AdminRoute,
} as any)
const PublicProfileUsernameRoute = PublicProfileUsernameRouteImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompetitionsSlugRouteRoute =
  PublicCompetitionsSlugRouteRouteImport.update({
    id: '/competitions/$slug',
    path: '/competitions/$slug',
    getParentRoute: () => PublicRouteRoute,
  } as any)
const PublicCompetitionsSlugIndexRoute =
  PublicCompetitionsSlugIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => PublicCompetitionsSlugRouteRoute,
  } as any)
const AdminContestsIdLeaderboardRoute =
  AdminContestsIdLeaderboardRouteImport.update({
    id: '/contests/$id/leaderboard',
    path: '/contests/$id/leaderboard',
    getParentRoute: () => AdminRoute,
  } as any)
const AdminContestsIdEditRoute = AdminContestsIdEditRouteImport.update({
  id: '/contests/$id/edit',
  path: '/contests/$id/edit',
  getParentRoute: () => AdminRoute,
} as any)
const PublicCompetitionsSlugParticipantsRoute =
  PublicCompetitionsSlugParticipantsRouteImport.update({
    id: '/participants',
    path: '/participants',
    getParentRoute: () => PublicCompetitionsSlugRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/winners': typeof WinnersRoute
  '/contact': typeof PublicContactRoute
  '/faq': typeof PublicFaqRoute
  '/privacy': typeof PublicPrivacyRoute
  '/rules': typeof PublicRulesRoute
  '/terms-of-services': typeof PublicTermsOfServicesRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/votes-boost': typeof AdminVotesBoostRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/voters': typeof VotersIndexRoute
  '/competitions/$slug': typeof PublicCompetitionsSlugRouteRouteWithChildren
  '/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/competitions': typeof PublicCompetitionsIndexRoute
  '/admin/contests': typeof AdminContestsIndexRoute
  '/admin/profiles': typeof AdminProfilesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/competitions/$slug/': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/winners': typeof WinnersRoute
  '/contact': typeof PublicContactRoute
  '/faq': typeof PublicFaqRoute
  '/privacy': typeof PublicPrivacyRoute
  '/rules': typeof PublicRulesRoute
  '/terms-of-services': typeof PublicTermsOfServicesRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/votes-boost': typeof AdminVotesBoostRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/admin': typeof AdminIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/voters': typeof VotersIndexRoute
  '/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/competitions': typeof PublicCompetitionsIndexRoute
  '/admin/contests': typeof AdminContestsIndexRoute
  '/admin/profiles': typeof AdminProfilesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/competitions/$slug': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_public': typeof PublicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/winners': typeof WinnersRoute
  '/_public/contact': typeof PublicContactRoute
  '/_public/faq': typeof PublicFaqRoute
  '/_public/privacy': typeof PublicPrivacyRoute
  '/_public/rules': typeof PublicRulesRoute
  '/_public/terms-of-services': typeof PublicTermsOfServicesRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/leaderboard': typeof AdminLeaderboardRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/votes-boost': typeof AdminVotesBoostRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/admin/': typeof AdminIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/leaderboard/': typeof LeaderboardIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/voters/': typeof VotersIndexRoute
  '/_public/competitions/$slug': typeof PublicCompetitionsSlugRouteRouteWithChildren
  '/_public/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/_public/competitions/': typeof PublicCompetitionsIndexRoute
  '/admin/contests/': typeof AdminContestsIndexRoute
  '/admin/profiles/': typeof AdminProfilesIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
  '/_public/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/_public/competitions/$slug/': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/$'
    | '/admin'
    | '/winners'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/rules'
    | '/terms-of-services'
    | '/admin/analytics'
    | '/admin/leaderboard'
    | '/admin/payments'
    | '/admin/votes-boost'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/admin/'
    | '/dashboard/'
    | '/leaderboard'
    | '/onboarding'
    | '/voters'
    | '/competitions/$slug'
    | '/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/competitions'
    | '/admin/contests'
    | '/admin/profiles'
    | '/admin/users'
    | '/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/competitions/$slug/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/winners'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/rules'
    | '/terms-of-services'
    | '/admin/analytics'
    | '/admin/leaderboard'
    | '/admin/payments'
    | '/admin/votes-boost'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/admin'
    | '/dashboard'
    | '/leaderboard'
    | '/onboarding'
    | '/voters'
    | '/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/competitions'
    | '/admin/contests'
    | '/admin/profiles'
    | '/admin/users'
    | '/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/competitions/$slug'
  id:
    | '__root__'
    | '/'
    | '/_public'
    | '/dashboard'
    | '/$'
    | '/admin'
    | '/winners'
    | '/_public/contact'
    | '/_public/faq'
    | '/_public/privacy'
    | '/_public/rules'
    | '/_public/terms-of-services'
    | '/admin/analytics'
    | '/admin/leaderboard'
    | '/admin/payments'
    | '/admin/votes-boost'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/admin/'
    | '/dashboard/'
    | '/leaderboard/'
    | '/onboarding/'
    | '/voters/'
    | '/_public/competitions/$slug'
    | '/_public/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/_public/competitions/'
    | '/admin/contests/'
    | '/admin/profiles/'
    | '/admin/users/'
    | '/_public/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/_public/competitions/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  SplatRoute: typeof SplatRoute
  AdminRoute: typeof AdminRouteWithChildren
  WinnersRoute: typeof WinnersRoute
  AuthIdRoute: typeof AuthIdRoute
  PaymentsFailureRoute: typeof PaymentsFailureRoute
  PaymentsSuccessRoute: typeof PaymentsSuccessRoute
  LeaderboardIndexRoute: typeof LeaderboardIndexRoute
  OnboardingIndexRoute: typeof OnboardingIndexRoute
  VotersIndexRoute: typeof VotersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/winners': {
      id: '/winners'
      path: '/winners'
      fullPath: '/winners'
      preLoaderRoute: typeof WinnersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/voters/': {
      id: '/voters/'
      path: '/voters'
      fullPath: '/voters'
      preLoaderRoute: typeof VotersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard/': {
      id: '/leaderboard/'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/payments/success': {
      id: '/payments/success'
      path: '/payments/success'
      fullPath: '/payments/success'
      preLoaderRoute: typeof PaymentsSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payments/failure': {
      id: '/payments/failure'
      path: '/payments/failure'
      fullPath: '/payments/failure'
      preLoaderRoute: typeof PaymentsFailureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/$section': {
      id: '/dashboard/$section'
      path: '/$section'
      fullPath: '/dashboard/$section'
      preLoaderRoute: typeof DashboardSectionRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/$id': {
      id: '/auth/$id'
      path: '/auth/$id'
      fullPath: '/auth/$id'
      preLoaderRoute: typeof AuthIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/winners': {
      id: '/admin/winners'
      path: '/winners'
      fullPath: '/admin/winners'
      preLoaderRoute: typeof AdminWinnersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/votes-boost': {
      id: '/admin/votes-boost'
      path: '/votes-boost'
      fullPath: '/admin/votes-boost'
      preLoaderRoute: typeof AdminVotesBoostRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/payments': {
      id: '/admin/payments'
      path: '/payments'
      fullPath: '/admin/payments'
      preLoaderRoute: typeof AdminPaymentsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/leaderboard': {
      id: '/admin/leaderboard'
      path: '/leaderboard'
      fullPath: '/admin/leaderboard'
      preLoaderRoute: typeof AdminLeaderboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/analytics': {
      id: '/admin/analytics'
      path: '/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/terms-of-services': {
      id: '/_public/terms-of-services'
      path: '/terms-of-services'
      fullPath: '/terms-of-services'
      preLoaderRoute: typeof PublicTermsOfServicesRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/rules': {
      id: '/_public/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof PublicRulesRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/privacy': {
      id: '/_public/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PublicPrivacyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/faq': {
      id: '/_public/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof PublicFaqRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/profiles/': {
      id: '/admin/profiles/'
      path: '/profiles'
      fullPath: '/admin/profiles'
      preLoaderRoute: typeof AdminProfilesIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/': {
      id: '/admin/contests/'
      path: '/contests'
      fullPath: '/admin/contests'
      preLoaderRoute: typeof AdminContestsIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/competitions/': {
      id: '/_public/competitions/'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof PublicCompetitionsIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/profiles/$id': {
      id: '/admin/profiles/$id'
      path: '/profiles/$id'
      fullPath: '/admin/profiles/$id'
      preLoaderRoute: typeof AdminProfilesIdRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/create': {
      id: '/admin/contests/create'
      path: '/contests/create'
      fullPath: '/admin/contests/create'
      preLoaderRoute: typeof AdminContestsCreateRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/profile/$username': {
      id: '/_public/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof PublicProfileUsernameRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/competitions/$slug': {
      id: '/_public/competitions/$slug'
      path: '/competitions/$slug'
      fullPath: '/competitions/$slug'
      preLoaderRoute: typeof PublicCompetitionsSlugRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/competitions/$slug/': {
      id: '/_public/competitions/$slug/'
      path: '/'
      fullPath: '/competitions/$slug/'
      preLoaderRoute: typeof PublicCompetitionsSlugIndexRouteImport
      parentRoute: typeof PublicCompetitionsSlugRouteRoute
    }
    '/admin/contests/$id/leaderboard': {
      id: '/admin/contests/$id/leaderboard'
      path: '/contests/$id/leaderboard'
      fullPath: '/admin/contests/$id/leaderboard'
      preLoaderRoute: typeof AdminContestsIdLeaderboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/$id/edit': {
      id: '/admin/contests/$id/edit'
      path: '/contests/$id/edit'
      fullPath: '/admin/contests/$id/edit'
      preLoaderRoute: typeof AdminContestsIdEditRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/competitions/$slug/participants': {
      id: '/_public/competitions/$slug/participants'
      path: '/participants'
      fullPath: '/competitions/$slug/participants'
      preLoaderRoute: typeof PublicCompetitionsSlugParticipantsRouteImport
      parentRoute: typeof PublicCompetitionsSlugRouteRoute
    }
  }
}

interface PublicCompetitionsSlugRouteRouteChildren {
  PublicCompetitionsSlugParticipantsRoute: typeof PublicCompetitionsSlugParticipantsRoute
  PublicCompetitionsSlugIndexRoute: typeof PublicCompetitionsSlugIndexRoute
}

const PublicCompetitionsSlugRouteRouteChildren: PublicCompetitionsSlugRouteRouteChildren =
  {
    PublicCompetitionsSlugParticipantsRoute:
      PublicCompetitionsSlugParticipantsRoute,
    PublicCompetitionsSlugIndexRoute: PublicCompetitionsSlugIndexRoute,
  }

const PublicCompetitionsSlugRouteRouteWithChildren =
  PublicCompetitionsSlugRouteRoute._addFileChildren(
    PublicCompetitionsSlugRouteRouteChildren,
  )

interface PublicRouteRouteChildren {
  PublicContactRoute: typeof PublicContactRoute
  PublicFaqRoute: typeof PublicFaqRoute
  PublicPrivacyRoute: typeof PublicPrivacyRoute
  PublicRulesRoute: typeof PublicRulesRoute
  PublicTermsOfServicesRoute: typeof PublicTermsOfServicesRoute
  PublicCompetitionsSlugRouteRoute: typeof PublicCompetitionsSlugRouteRouteWithChildren
  PublicProfileUsernameRoute: typeof PublicProfileUsernameRoute
  PublicCompetitionsIndexRoute: typeof PublicCompetitionsIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicContactRoute: PublicContactRoute,
  PublicFaqRoute: PublicFaqRoute,
  PublicPrivacyRoute: PublicPrivacyRoute,
  PublicRulesRoute: PublicRulesRoute,
  PublicTermsOfServicesRoute: PublicTermsOfServicesRoute,
  PublicCompetitionsSlugRouteRoute:
    PublicCompetitionsSlugRouteRouteWithChildren,
  PublicProfileUsernameRoute: PublicProfileUsernameRoute,
  PublicCompetitionsIndexRoute: PublicCompetitionsIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardSectionRoute: typeof DashboardSectionRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardSectionRoute: DashboardSectionRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface AdminRouteChildren {
  AdminAnalyticsRoute: typeof AdminAnalyticsRoute
  AdminLeaderboardRoute: typeof AdminLeaderboardRoute
  AdminPaymentsRoute: typeof AdminPaymentsRoute
  AdminVotesBoostRoute: typeof AdminVotesBoostRoute
  AdminWinnersRoute: typeof AdminWinnersRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminContestsCreateRoute: typeof AdminContestsCreateRoute
  AdminProfilesIdRoute: typeof AdminProfilesIdRoute
  AdminContestsIndexRoute: typeof AdminContestsIndexRoute
  AdminProfilesIndexRoute: typeof AdminProfilesIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
  AdminContestsIdEditRoute: typeof AdminContestsIdEditRoute
  AdminContestsIdLeaderboardRoute: typeof AdminContestsIdLeaderboardRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAnalyticsRoute: AdminAnalyticsRoute,
  AdminLeaderboardRoute: AdminLeaderboardRoute,
  AdminPaymentsRoute: AdminPaymentsRoute,
  AdminVotesBoostRoute: AdminVotesBoostRoute,
  AdminWinnersRoute: AdminWinnersRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminContestsCreateRoute: AdminContestsCreateRoute,
  AdminProfilesIdRoute: AdminProfilesIdRoute,
  AdminContestsIndexRoute: AdminContestsIndexRoute,
  AdminProfilesIndexRoute: AdminProfilesIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
  AdminContestsIdEditRoute: AdminContestsIdEditRoute,
  AdminContestsIdLeaderboardRoute: AdminContestsIdLeaderboardRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  SplatRoute: SplatRoute,
  AdminRoute: AdminRouteWithChildren,
  WinnersRoute: WinnersRoute,
  AuthIdRoute: AuthIdRoute,
  PaymentsFailureRoute: PaymentsFailureRoute,
  PaymentsSuccessRoute: PaymentsSuccessRoute,
  LeaderboardIndexRoute: LeaderboardIndexRoute,
  OnboardingIndexRoute: OnboardingIndexRoute,
  VotersIndexRoute: VotersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
