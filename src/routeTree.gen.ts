/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as SplatRouteImport } from './routes/$'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VotersIndexRouteImport } from './routes/voters/index'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as PaymentsSuccessRouteImport } from './routes/payments/success'
import { Route as PaymentsFailureRouteImport } from './routes/payments/failure'
import { Route as DashboardSectionRouteImport } from './routes/dashboard/$section'
import { Route as AuthIdRouteImport } from './routes/auth/$id'
import { Route as AdminWinnersRouteImport } from './routes/admin/winners'
import { Route as AdminAnalyticsRouteImport } from './routes/admin/analytics'
import { Route as AdminVotesRouteRouteImport } from './routes/admin/votes/route'
import { Route as AdminVotesIndexRouteImport } from './routes/admin/votes/index'
import { Route as AdminProfilesIndexRouteImport } from './routes/admin/profiles/index'
import { Route as AdminContestsIndexRouteImport } from './routes/admin/contests/index'
import { Route as PublicLeaderboardIndexRouteImport } from './routes/_public/leaderboard/index'
import { Route as AdminVotesMultiplierBoostRouteImport } from './routes/admin/votes/multiplier-boost'
import { Route as AdminProfilesIdRouteImport } from './routes/admin/profiles/$id'
import { Route as AdminContestsCreateRouteImport } from './routes/admin/contests/create'
import { Route as PublicProfileUsernameRouteImport } from './routes/_public/profile.$username'
import { Route as PublicCompetitionsSlugRouteRouteImport } from './routes/_public/competitions/$slug/route'
import { Route as PublicCompetitionsSlugIndexRouteImport } from './routes/_public/competitions/$slug/index'
import { Route as AdminContestsIdParticipantsRouteImport } from './routes/admin/contests/$id.participants'
import { Route as AdminContestsIdLeaderboardRouteImport } from './routes/admin/contests/$id.leaderboard'
import { Route as AdminContestsIdEditRouteImport } from './routes/admin/contests/$id.edit'
import { Route as PublicCompetitionsSlugParticipantsRouteImport } from './routes/_public/competitions/$slug/participants'

const DashboardIndexLazyRouteImport = createFileRoute('/dashboard/')()
const AdminPaymentsLazyRouteImport = createFileRoute('/admin/payments')()
const AdminNotificationsLazyRouteImport = createFileRoute(
  '/admin/notifications',
)()
const PublicTermsOfServicesLazyRouteImport = createFileRoute(
  '/_public/terms-of-services',
)()
const PublicRulesLazyRouteImport = createFileRoute('/_public/rules')()
const PublicPrivacyLazyRouteImport = createFileRoute('/_public/privacy')()
const PublicFaqLazyRouteImport = createFileRoute('/_public/faq')()
const PublicContactLazyRouteImport = createFileRoute('/_public/contact')()
const AdminUsersIndexLazyRouteImport = createFileRoute('/admin/users/')()
const AdminRanksIndexLazyRouteImport = createFileRoute('/admin/ranks/')()
const PublicCompetitionsIndexLazyRouteImport = createFileRoute(
  '/_public/competitions/',
)()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexLazyRoute = DashboardIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any).lazy(() =>
  import('./routes/dashboard/index.lazy').then((d) => d.Route),
)
const VotersIndexRoute = VotersIndexRouteImport.update({
  id: '/voters/',
  path: '/voters/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminPaymentsLazyRoute = AdminPaymentsLazyRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/admin/payments.lazy').then((d) => d.Route),
)
const AdminNotificationsLazyRoute = AdminNotificationsLazyRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/admin/notifications.lazy').then((d) => d.Route),
)
const PublicTermsOfServicesLazyRoute =
  PublicTermsOfServicesLazyRouteImport.update({
    id: '/terms-of-services',
    path: '/terms-of-services',
    getParentRoute: () => PublicRouteRoute,
  } as any).lazy(() =>
    import('./routes/_public/terms-of-services.lazy').then((d) => d.Route),
  )
const PublicRulesLazyRoute = PublicRulesLazyRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/rules.lazy').then((d) => d.Route))
const PublicPrivacyLazyRoute = PublicPrivacyLazyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() =>
  import('./routes/_public/privacy.lazy').then((d) => d.Route),
)
const PublicFaqLazyRoute = PublicFaqLazyRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() => import('./routes/_public/faq.lazy').then((d) => d.Route))
const PublicContactLazyRoute = PublicContactLazyRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => PublicRouteRoute,
} as any).lazy(() =>
  import('./routes/_public/contact.lazy').then((d) => d.Route),
)
const PaymentsSuccessRoute = PaymentsSuccessRouteImport.update({
  id: '/payments/success',
  path: '/payments/success',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentsFailureRoute = PaymentsFailureRouteImport.update({
  id: '/payments/failure',
  path: '/payments/failure',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardSectionRoute = DashboardSectionRouteImport.update({
  id: '/$section',
  path: '/$section',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthIdRoute = AuthIdRouteImport.update({
  id: '/auth/$id',
  path: '/auth/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminWinnersRoute = AdminWinnersRouteImport.update({
  id: '/winners',
  path: '/winners',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAnalyticsRoute = AdminAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AdminRoute,
} as any)
const AdminVotesRouteRoute = AdminVotesRouteRouteImport.update({
  id: '/votes',
  path: '/votes',
  getParentRoute: () => AdminRoute,
} as any)
const AdminUsersIndexLazyRoute = AdminUsersIndexLazyRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/admin/users/index.lazy').then((d) => d.Route),
)
const AdminRanksIndexLazyRoute = AdminRanksIndexLazyRouteImport.update({
  id: '/ranks/',
  path: '/ranks/',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/admin/ranks/index.lazy').then((d) => d.Route),
)
const PublicCompetitionsIndexLazyRoute =
  PublicCompetitionsIndexLazyRouteImport.update({
    id: '/competitions/',
    path: '/competitions/',
    getParentRoute: () => PublicRouteRoute,
  } as any).lazy(() =>
    import('./routes/_public/competitions/index.lazy').then((d) => d.Route),
  )
const AdminVotesIndexRoute = AdminVotesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminVotesRouteRoute,
} as any)
const AdminProfilesIndexRoute = AdminProfilesIndexRouteImport.update({
  id: '/profiles/',
  path: '/profiles/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestsIndexRoute = AdminContestsIndexRouteImport.update({
  id: '/contests/',
  path: '/contests/',
  getParentRoute: () => AdminRoute,
} as any)
const PublicLeaderboardIndexRoute = PublicLeaderboardIndexRouteImport.update({
  id: '/leaderboard/',
  path: '/leaderboard/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AdminVotesMultiplierBoostRoute =
  AdminVotesMultiplierBoostRouteImport.update({
    id: '/multiplier-boost',
    path: '/multiplier-boost',
    getParentRoute: () => AdminVotesRouteRoute,
  } as any)
const AdminProfilesIdRoute = AdminProfilesIdRouteImport.update({
  id: '/profiles/$id',
  path: '/profiles/$id',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContestsCreateRoute = AdminContestsCreateRouteImport.update({
  id: '/contests/create',
  path: '/contests/create',
  getParentRoute: () => AdminRoute,
} as any)
const PublicProfileUsernameRoute = PublicProfileUsernameRouteImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicCompetitionsSlugRouteRoute =
  PublicCompetitionsSlugRouteRouteImport.update({
    id: '/competitions/$slug',
    path: '/competitions/$slug',
    getParentRoute: () => PublicRouteRoute,
  } as any)
const PublicCompetitionsSlugIndexRoute =
  PublicCompetitionsSlugIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => PublicCompetitionsSlugRouteRoute,
  } as any)
const AdminContestsIdParticipantsRoute =
  AdminContestsIdParticipantsRouteImport.update({
    id: '/contests/$id/participants',
    path: '/contests/$id/participants',
    getParentRoute: () => AdminRoute,
  } as any)
const AdminContestsIdLeaderboardRoute =
  AdminContestsIdLeaderboardRouteImport.update({
    id: '/contests/$id/leaderboard',
    path: '/contests/$id/leaderboard',
    getParentRoute: () => AdminRoute,
  } as any)
const AdminContestsIdEditRoute = AdminContestsIdEditRouteImport.update({
  id: '/contests/$id/edit',
  path: '/contests/$id/edit',
  getParentRoute: () => AdminRoute,
} as any)
const PublicCompetitionsSlugParticipantsRoute =
  PublicCompetitionsSlugParticipantsRouteImport.update({
    id: '/participants',
    path: '/participants',
    getParentRoute: () => PublicCompetitionsSlugRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/votes': typeof AdminVotesRouteRouteWithChildren
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/contact': typeof PublicContactLazyRoute
  '/faq': typeof PublicFaqLazyRoute
  '/privacy': typeof PublicPrivacyLazyRoute
  '/rules': typeof PublicRulesLazyRoute
  '/terms-of-services': typeof PublicTermsOfServicesLazyRoute
  '/admin/notifications': typeof AdminNotificationsLazyRoute
  '/admin/payments': typeof AdminPaymentsLazyRoute
  '/admin/': typeof AdminIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/voters': typeof VotersIndexRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/competitions/$slug': typeof PublicCompetitionsSlugRouteRouteWithChildren
  '/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/admin/votes/multiplier-boost': typeof AdminVotesMultiplierBoostRoute
  '/leaderboard': typeof PublicLeaderboardIndexRoute
  '/admin/contests': typeof AdminContestsIndexRoute
  '/admin/profiles': typeof AdminProfilesIndexRoute
  '/admin/votes/': typeof AdminVotesIndexRoute
  '/competitions': typeof PublicCompetitionsIndexLazyRoute
  '/admin/ranks': typeof AdminRanksIndexLazyRoute
  '/admin/users': typeof AdminUsersIndexLazyRoute
  '/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/admin/contests/$id/participants': typeof AdminContestsIdParticipantsRoute
  '/competitions/$slug/': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/contact': typeof PublicContactLazyRoute
  '/faq': typeof PublicFaqLazyRoute
  '/privacy': typeof PublicPrivacyLazyRoute
  '/rules': typeof PublicRulesLazyRoute
  '/terms-of-services': typeof PublicTermsOfServicesLazyRoute
  '/admin/notifications': typeof AdminNotificationsLazyRoute
  '/admin/payments': typeof AdminPaymentsLazyRoute
  '/admin': typeof AdminIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/voters': typeof VotersIndexRoute
  '/dashboard': typeof DashboardIndexLazyRoute
  '/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/admin/votes/multiplier-boost': typeof AdminVotesMultiplierBoostRoute
  '/leaderboard': typeof PublicLeaderboardIndexRoute
  '/admin/contests': typeof AdminContestsIndexRoute
  '/admin/profiles': typeof AdminProfilesIndexRoute
  '/admin/votes': typeof AdminVotesIndexRoute
  '/competitions': typeof PublicCompetitionsIndexLazyRoute
  '/admin/ranks': typeof AdminRanksIndexLazyRoute
  '/admin/users': typeof AdminUsersIndexLazyRoute
  '/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/admin/contests/$id/participants': typeof AdminContestsIdParticipantsRoute
  '/competitions/$slug': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_public': typeof PublicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/$': typeof SplatRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/votes': typeof AdminVotesRouteRouteWithChildren
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/winners': typeof AdminWinnersRoute
  '/auth/$id': typeof AuthIdRoute
  '/dashboard/$section': typeof DashboardSectionRoute
  '/payments/failure': typeof PaymentsFailureRoute
  '/payments/success': typeof PaymentsSuccessRoute
  '/_public/contact': typeof PublicContactLazyRoute
  '/_public/faq': typeof PublicFaqLazyRoute
  '/_public/privacy': typeof PublicPrivacyLazyRoute
  '/_public/rules': typeof PublicRulesLazyRoute
  '/_public/terms-of-services': typeof PublicTermsOfServicesLazyRoute
  '/admin/notifications': typeof AdminNotificationsLazyRoute
  '/admin/payments': typeof AdminPaymentsLazyRoute
  '/admin/': typeof AdminIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/voters/': typeof VotersIndexRoute
  '/dashboard/': typeof DashboardIndexLazyRoute
  '/_public/competitions/$slug': typeof PublicCompetitionsSlugRouteRouteWithChildren
  '/_public/profile/$username': typeof PublicProfileUsernameRoute
  '/admin/contests/create': typeof AdminContestsCreateRoute
  '/admin/profiles/$id': typeof AdminProfilesIdRoute
  '/admin/votes/multiplier-boost': typeof AdminVotesMultiplierBoostRoute
  '/_public/leaderboard/': typeof PublicLeaderboardIndexRoute
  '/admin/contests/': typeof AdminContestsIndexRoute
  '/admin/profiles/': typeof AdminProfilesIndexRoute
  '/admin/votes/': typeof AdminVotesIndexRoute
  '/_public/competitions/': typeof PublicCompetitionsIndexLazyRoute
  '/admin/ranks/': typeof AdminRanksIndexLazyRoute
  '/admin/users/': typeof AdminUsersIndexLazyRoute
  '/_public/competitions/$slug/participants': typeof PublicCompetitionsSlugParticipantsRoute
  '/admin/contests/$id/edit': typeof AdminContestsIdEditRoute
  '/admin/contests/$id/leaderboard': typeof AdminContestsIdLeaderboardRoute
  '/admin/contests/$id/participants': typeof AdminContestsIdParticipantsRoute
  '/_public/competitions/$slug/': typeof PublicCompetitionsSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/$'
    | '/admin'
    | '/admin/votes'
    | '/admin/analytics'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/rules'
    | '/terms-of-services'
    | '/admin/notifications'
    | '/admin/payments'
    | '/admin/'
    | '/onboarding'
    | '/voters'
    | '/dashboard/'
    | '/competitions/$slug'
    | '/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/admin/votes/multiplier-boost'
    | '/leaderboard'
    | '/admin/contests'
    | '/admin/profiles'
    | '/admin/votes/'
    | '/competitions'
    | '/admin/ranks'
    | '/admin/users'
    | '/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/admin/contests/$id/participants'
    | '/competitions/$slug/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/admin/analytics'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/contact'
    | '/faq'
    | '/privacy'
    | '/rules'
    | '/terms-of-services'
    | '/admin/notifications'
    | '/admin/payments'
    | '/admin'
    | '/onboarding'
    | '/voters'
    | '/dashboard'
    | '/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/admin/votes/multiplier-boost'
    | '/leaderboard'
    | '/admin/contests'
    | '/admin/profiles'
    | '/admin/votes'
    | '/competitions'
    | '/admin/ranks'
    | '/admin/users'
    | '/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/admin/contests/$id/participants'
    | '/competitions/$slug'
  id:
    | '__root__'
    | '/'
    | '/_public'
    | '/dashboard'
    | '/$'
    | '/admin'
    | '/admin/votes'
    | '/admin/analytics'
    | '/admin/winners'
    | '/auth/$id'
    | '/dashboard/$section'
    | '/payments/failure'
    | '/payments/success'
    | '/_public/contact'
    | '/_public/faq'
    | '/_public/privacy'
    | '/_public/rules'
    | '/_public/terms-of-services'
    | '/admin/notifications'
    | '/admin/payments'
    | '/admin/'
    | '/onboarding/'
    | '/voters/'
    | '/dashboard/'
    | '/_public/competitions/$slug'
    | '/_public/profile/$username'
    | '/admin/contests/create'
    | '/admin/profiles/$id'
    | '/admin/votes/multiplier-boost'
    | '/_public/leaderboard/'
    | '/admin/contests/'
    | '/admin/profiles/'
    | '/admin/votes/'
    | '/_public/competitions/'
    | '/admin/ranks/'
    | '/admin/users/'
    | '/_public/competitions/$slug/participants'
    | '/admin/contests/$id/edit'
    | '/admin/contests/$id/leaderboard'
    | '/admin/contests/$id/participants'
    | '/_public/competitions/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  SplatRoute: typeof SplatRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthIdRoute: typeof AuthIdRoute
  PaymentsFailureRoute: typeof PaymentsFailureRoute
  PaymentsSuccessRoute: typeof PaymentsSuccessRoute
  OnboardingIndexRoute: typeof OnboardingIndexRoute
  VotersIndexRoute: typeof VotersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexLazyRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/voters/': {
      id: '/voters/'
      path: '/voters'
      fullPath: '/voters'
      preLoaderRoute: typeof VotersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/payments': {
      id: '/admin/payments'
      path: '/payments'
      fullPath: '/admin/payments'
      preLoaderRoute: typeof AdminPaymentsLazyRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/notifications': {
      id: '/admin/notifications'
      path: '/notifications'
      fullPath: '/admin/notifications'
      preLoaderRoute: typeof AdminNotificationsLazyRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/terms-of-services': {
      id: '/_public/terms-of-services'
      path: '/terms-of-services'
      fullPath: '/terms-of-services'
      preLoaderRoute: typeof PublicTermsOfServicesLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/rules': {
      id: '/_public/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof PublicRulesLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/privacy': {
      id: '/_public/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PublicPrivacyLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/faq': {
      id: '/_public/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof PublicFaqLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/contact': {
      id: '/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof PublicContactLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/payments/success': {
      id: '/payments/success'
      path: '/payments/success'
      fullPath: '/payments/success'
      preLoaderRoute: typeof PaymentsSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payments/failure': {
      id: '/payments/failure'
      path: '/payments/failure'
      fullPath: '/payments/failure'
      preLoaderRoute: typeof PaymentsFailureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/$section': {
      id: '/dashboard/$section'
      path: '/$section'
      fullPath: '/dashboard/$section'
      preLoaderRoute: typeof DashboardSectionRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/$id': {
      id: '/auth/$id'
      path: '/auth/$id'
      fullPath: '/auth/$id'
      preLoaderRoute: typeof AuthIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/winners': {
      id: '/admin/winners'
      path: '/winners'
      fullPath: '/admin/winners'
      preLoaderRoute: typeof AdminWinnersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/analytics': {
      id: '/admin/analytics'
      path: '/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/votes': {
      id: '/admin/votes'
      path: '/votes'
      fullPath: '/admin/votes'
      preLoaderRoute: typeof AdminVotesRouteRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexLazyRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/ranks/': {
      id: '/admin/ranks/'
      path: '/ranks'
      fullPath: '/admin/ranks'
      preLoaderRoute: typeof AdminRanksIndexLazyRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/competitions/': {
      id: '/_public/competitions/'
      path: '/competitions'
      fullPath: '/competitions'
      preLoaderRoute: typeof PublicCompetitionsIndexLazyRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/votes/': {
      id: '/admin/votes/'
      path: '/'
      fullPath: '/admin/votes/'
      preLoaderRoute: typeof AdminVotesIndexRouteImport
      parentRoute: typeof AdminVotesRouteRoute
    }
    '/admin/profiles/': {
      id: '/admin/profiles/'
      path: '/profiles'
      fullPath: '/admin/profiles'
      preLoaderRoute: typeof AdminProfilesIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/': {
      id: '/admin/contests/'
      path: '/contests'
      fullPath: '/admin/contests'
      preLoaderRoute: typeof AdminContestsIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/leaderboard/': {
      id: '/_public/leaderboard/'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof PublicLeaderboardIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/admin/votes/multiplier-boost': {
      id: '/admin/votes/multiplier-boost'
      path: '/multiplier-boost'
      fullPath: '/admin/votes/multiplier-boost'
      preLoaderRoute: typeof AdminVotesMultiplierBoostRouteImport
      parentRoute: typeof AdminVotesRouteRoute
    }
    '/admin/profiles/$id': {
      id: '/admin/profiles/$id'
      path: '/profiles/$id'
      fullPath: '/admin/profiles/$id'
      preLoaderRoute: typeof AdminProfilesIdRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/create': {
      id: '/admin/contests/create'
      path: '/contests/create'
      fullPath: '/admin/contests/create'
      preLoaderRoute: typeof AdminContestsCreateRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/profile/$username': {
      id: '/_public/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof PublicProfileUsernameRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/competitions/$slug': {
      id: '/_public/competitions/$slug'
      path: '/competitions/$slug'
      fullPath: '/competitions/$slug'
      preLoaderRoute: typeof PublicCompetitionsSlugRouteRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/competitions/$slug/': {
      id: '/_public/competitions/$slug/'
      path: '/'
      fullPath: '/competitions/$slug/'
      preLoaderRoute: typeof PublicCompetitionsSlugIndexRouteImport
      parentRoute: typeof PublicCompetitionsSlugRouteRoute
    }
    '/admin/contests/$id/participants': {
      id: '/admin/contests/$id/participants'
      path: '/contests/$id/participants'
      fullPath: '/admin/contests/$id/participants'
      preLoaderRoute: typeof AdminContestsIdParticipantsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/$id/leaderboard': {
      id: '/admin/contests/$id/leaderboard'
      path: '/contests/$id/leaderboard'
      fullPath: '/admin/contests/$id/leaderboard'
      preLoaderRoute: typeof AdminContestsIdLeaderboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/contests/$id/edit': {
      id: '/admin/contests/$id/edit'
      path: '/contests/$id/edit'
      fullPath: '/admin/contests/$id/edit'
      preLoaderRoute: typeof AdminContestsIdEditRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_public/competitions/$slug/participants': {
      id: '/_public/competitions/$slug/participants'
      path: '/participants'
      fullPath: '/competitions/$slug/participants'
      preLoaderRoute: typeof PublicCompetitionsSlugParticipantsRouteImport
      parentRoute: typeof PublicCompetitionsSlugRouteRoute
    }
  }
}

interface PublicCompetitionsSlugRouteRouteChildren {
  PublicCompetitionsSlugParticipantsRoute: typeof PublicCompetitionsSlugParticipantsRoute
  PublicCompetitionsSlugIndexRoute: typeof PublicCompetitionsSlugIndexRoute
}

const PublicCompetitionsSlugRouteRouteChildren: PublicCompetitionsSlugRouteRouteChildren =
  {
    PublicCompetitionsSlugParticipantsRoute:
      PublicCompetitionsSlugParticipantsRoute,
    PublicCompetitionsSlugIndexRoute: PublicCompetitionsSlugIndexRoute,
  }

const PublicCompetitionsSlugRouteRouteWithChildren =
  PublicCompetitionsSlugRouteRoute._addFileChildren(
    PublicCompetitionsSlugRouteRouteChildren,
  )

interface PublicRouteRouteChildren {
  PublicContactLazyRoute: typeof PublicContactLazyRoute
  PublicFaqLazyRoute: typeof PublicFaqLazyRoute
  PublicPrivacyLazyRoute: typeof PublicPrivacyLazyRoute
  PublicRulesLazyRoute: typeof PublicRulesLazyRoute
  PublicTermsOfServicesLazyRoute: typeof PublicTermsOfServicesLazyRoute
  PublicCompetitionsSlugRouteRoute: typeof PublicCompetitionsSlugRouteRouteWithChildren
  PublicProfileUsernameRoute: typeof PublicProfileUsernameRoute
  PublicLeaderboardIndexRoute: typeof PublicLeaderboardIndexRoute
  PublicCompetitionsIndexLazyRoute: typeof PublicCompetitionsIndexLazyRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicContactLazyRoute: PublicContactLazyRoute,
  PublicFaqLazyRoute: PublicFaqLazyRoute,
  PublicPrivacyLazyRoute: PublicPrivacyLazyRoute,
  PublicRulesLazyRoute: PublicRulesLazyRoute,
  PublicTermsOfServicesLazyRoute: PublicTermsOfServicesLazyRoute,
  PublicCompetitionsSlugRouteRoute:
    PublicCompetitionsSlugRouteRouteWithChildren,
  PublicProfileUsernameRoute: PublicProfileUsernameRoute,
  PublicLeaderboardIndexRoute: PublicLeaderboardIndexRoute,
  PublicCompetitionsIndexLazyRoute: PublicCompetitionsIndexLazyRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardSectionRoute: typeof DashboardSectionRoute
  DashboardIndexLazyRoute: typeof DashboardIndexLazyRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardSectionRoute: DashboardSectionRoute,
  DashboardIndexLazyRoute: DashboardIndexLazyRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface AdminVotesRouteRouteChildren {
  AdminVotesMultiplierBoostRoute: typeof AdminVotesMultiplierBoostRoute
  AdminVotesIndexRoute: typeof AdminVotesIndexRoute
}

const AdminVotesRouteRouteChildren: AdminVotesRouteRouteChildren = {
  AdminVotesMultiplierBoostRoute: AdminVotesMultiplierBoostRoute,
  AdminVotesIndexRoute: AdminVotesIndexRoute,
}

const AdminVotesRouteRouteWithChildren = AdminVotesRouteRoute._addFileChildren(
  AdminVotesRouteRouteChildren,
)

interface AdminRouteChildren {
  AdminVotesRouteRoute: typeof AdminVotesRouteRouteWithChildren
  AdminAnalyticsRoute: typeof AdminAnalyticsRoute
  AdminWinnersRoute: typeof AdminWinnersRoute
  AdminNotificationsLazyRoute: typeof AdminNotificationsLazyRoute
  AdminPaymentsLazyRoute: typeof AdminPaymentsLazyRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminContestsCreateRoute: typeof AdminContestsCreateRoute
  AdminProfilesIdRoute: typeof AdminProfilesIdRoute
  AdminContestsIndexRoute: typeof AdminContestsIndexRoute
  AdminProfilesIndexRoute: typeof AdminProfilesIndexRoute
  AdminRanksIndexLazyRoute: typeof AdminRanksIndexLazyRoute
  AdminUsersIndexLazyRoute: typeof AdminUsersIndexLazyRoute
  AdminContestsIdEditRoute: typeof AdminContestsIdEditRoute
  AdminContestsIdLeaderboardRoute: typeof AdminContestsIdLeaderboardRoute
  AdminContestsIdParticipantsRoute: typeof AdminContestsIdParticipantsRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminVotesRouteRoute: AdminVotesRouteRouteWithChildren,
  AdminAnalyticsRoute: AdminAnalyticsRoute,
  AdminWinnersRoute: AdminWinnersRoute,
  AdminNotificationsLazyRoute: AdminNotificationsLazyRoute,
  AdminPaymentsLazyRoute: AdminPaymentsLazyRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminContestsCreateRoute: AdminContestsCreateRoute,
  AdminProfilesIdRoute: AdminProfilesIdRoute,
  AdminContestsIndexRoute: AdminContestsIndexRoute,
  AdminProfilesIndexRoute: AdminProfilesIndexRoute,
  AdminRanksIndexLazyRoute: AdminRanksIndexLazyRoute,
  AdminUsersIndexLazyRoute: AdminUsersIndexLazyRoute,
  AdminContestsIdEditRoute: AdminContestsIdEditRoute,
  AdminContestsIdLeaderboardRoute: AdminContestsIdLeaderboardRoute,
  AdminContestsIdParticipantsRoute: AdminContestsIdParticipantsRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  SplatRoute: SplatRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthIdRoute: AuthIdRoute,
  PaymentsFailureRoute: PaymentsFailureRoute,
  PaymentsSuccessRoute: PaymentsSuccessRoute,
  OnboardingIndexRoute: OnboardingIndexRoute,
  VotersIndexRoute: VotersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
